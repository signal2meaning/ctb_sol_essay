"PRICE_pred","LOCSCORE2_pred","STARRATING_pred","PROMOTION_pred",
"prev_pos","prop_loc_NAs","prop_hist_log_price_NAs")
library(gbm)
fmla <- as.formula(paste("y_s~ ",paste(sel,collapse= "+")))
set.seed(5486)
LambdaMart_49e_T2<-gbm(
fmla,
data=Data4LBM_T2,
distribution= list(name="pairwise",group="srch_id",metric="ndcg"),
n.trees=2000,
interaction.depth=8,
shrinkage=0.05,
bag.fraction=0.75,
verbose=T)
summary(LambdaMart_49e_T2)
Store(LambdaMart_49e_T2)
########################################################################
# valid
########################################################################
LambdaMart_49e_T2_V<-predict(LambdaMart_49e_T2,Data4LBM_V,n.trees=2000)
Store(LambdaMart_49e_T2_V)
perf.pairwise(Data4LBM_V$y_s,LambdaMart_49e_T2_V,Data4LBM_V$srch_id,metric = "ndcg", w = NULL, max.rank = 38)
#
sol<-data.frame(data4sub,pred=LambdaMart_49d_T2_H)
library(gbm)
LambdaMart_49d_T2_H<-predict(LambdaMart_49d_T2,Data4LBM_H,n.trees=2000)
library(gbm)
LambdaMart_49e_T2_H<-predict(LambdaMart_49e_T2,Data4LBM_H,n.trees=2000)
Store(LambdaMart_49e_T2_H)
sol<-data.frame(data4sub,pred=LambdaMart_49e_T2_H)
sol<-sol[order(sol$srch_id,-sol$pred),]
names(sol)[1:2]<-c("SearchId","PropertyId")
write.csv(sol[,1:2],file="LambdaMart_49e_T2.csv",row.names=F)
library(SOAR)
Objects()
tmp<-unique(Data4LBM_T[,book_sel])
table(duplicated(tmp$srch_id))
tmp<-Data4LBM_T[,c("srch_id_nb",
"site_id",
"srch_destination_id_nb","random_bool",
"srch_length_of_stay","srch_booking_window","srch_adults_count",
"srch_children_count","srch_room_count","srch_saturday_night_bool",
"visitor_location_country_id","visitor_hist_starrating",
"visitor_hist_adr_usd")]
tmp<-tmp[-which(duplicated(tmp$srch_id)),]
tmp<-Data4LBM_T[,c("rowId","srch_id_nb",
"site_id",
"srch_destination_id_nb","random_bool",
"srch_length_of_stay","srch_booking_window","srch_adults_count",
"srch_children_count","srch_room_count","srch_saturday_night_bool",
"visitor_location_country_id","visitor_hist_starrating",
"visitor_hist_adr_usd")]
tmp<-tmp[-which(duplicated(tmp$srch_id)),]
srch_2predict_T<-Data4LBM_T[,c("rowId","srch_id_nb",
"site_id",
"srch_destination_id_nb","random_bool",
"srch_length_of_stay","srch_booking_window","srch_adults_count",
"srch_children_count","srch_room_count","srch_saturday_night_bool",
"visitor_location_country_id","visitor_hist_starrating",
"visitor_hist_adr_usd")]
srch_2predict_T<-srch_2predict_T[-which(duplicated(srch_2predict_T$srch_id)),]
# add info on main country (because it is sometimes a different country)
srch_2predict_T$main_country<-country_info$main_country[srch_2predict_T$rowId]
srch_2predict_T$date_time<-fullset$date_time[srch_2predict_T$rowId]
srch_2predict_T$date<-strptime(srch_2predict_T$date_time,"%Y-%m-%d")
srch_2predict_T$date<-as.Date(srch_2predict_T$date,"%Y-%m-%d")
srch_2predict_T$date_stay<-as.numeric(srch_2predict_T$date)+srch_2predict_T$srch_booking_window
srch_2predict_T<-Data4LBM_T[,c("rowId","srch_id_nb",
"site_id",
"srch_destination_id_nb","random_bool",
"srch_length_of_stay","srch_booking_window","srch_adults_count",
"srch_children_count","srch_room_count","srch_saturday_night_bool",
"visitor_location_country_id","visitor_hist_starrating",
"visitor_hist_adr_usd")]
# keep only one row per srch
srch_2predict_T<-srch_2predict_T[-which(duplicated(srch_2predict_T$srch_id)),]
srch_2predict_T<-srch_2predict_T[!srch_2predict_T$srch_id %in% book_prof$srch_id,]
load("~/Documents/Expedia/country_info.RData")
srch_2predict_T$main_country<-country_info$main_country[srch_2predict_T$rowId]
srch_2predict_T$date_time<-fullset$date_time[srch_2predict_T$rowId]
save(LambdaMart_49e_T2_V,file="LambdaMart_49e_T2_V.RData")
library(SOAR)
Objects()
save(LambdaMart_49e_T2_V,file="LambdaMart_49e_T2_V.RData")
cond<-!Data4LBM_V$srch_id %in% Data4LBM_T2$srch_id
perf.pairwise(Data4LBM_V$y_s[cond],LambdaMart_49e_T2_V[cond],Data4LBM_V$srch_id[cond],metric = "ndcg", w = NULL, max.rank = 38)
library(gbm)
perf.pairwise(Data4LBM_V$y_s[cond],LambdaMart_49e_T2_V[cond],Data4LBM_V$srch_id[cond],metric = "ndcg", w = NULL, max.rank = 38)
save(LambdaMart_49e_T2_V,cond,file="LambdaMart_49e_T2_V.RData")
library(SOAR)
Objects()
save(Data4LBM_H,file="Data4LBM_H.RData")
load("~/Documents/Expedia/DATA_4T1.RData")
load("~/Documents/Expedia/DATA_4T1.RData")
sel<-c("LibFMR12_1_1_10_g_400_V",
"LibFMR12_b_1_1_10_g_400_V",
"promotion_flag","random_bool",
"prop_starrating","prop_hist_log_price",
"price_usd","prop_location_score2",
"orig_destination_distance","prop_review_score",
"srch_length_of_stay","srch_booking_window","srch_adults_count",
"srch_children_count","srch_room_count",
"srch_saturday_night_bool","srch_query_affinity_score",
"comp_nb","comp_bo_nb",
"comp_lc_nb","Clean_price_dev",
"srch_id_nb","site_id_nb",
"visitor_location_country_id_nb","prop_country_id_nb",
"prop_id_nb","srch_destination_id_nb",
"VisProp_price_Dev",
"Diff50_starrating","Diff50_review_score",
"Diff50_location_score1","Diff50_loc","Diff50_price_usd",
"Diff_promotion_flag",
"Gap_PR","Gap_LOC","Gap_STAR","Gap_PROM",
"PR_pred","LOC_pred","STAR_pred","PROM_pred",
"prev_pos","prop_loc_NAs","prop_hist_log_price_NAs")
library(gbm)
fmla <- as.formula(paste("y_s~ ",paste(sel,collapse= "+")))
set.seed(5486)
LambdaMart_51<-gbm(
fmla,
data=DATA_4T1,
distribution= list(name="pairwise",group="srch_id",metric="ndcg"),
n.trees=2000,
interaction.depth=8,
shrinkage=0.05,
bag.fraction=0.75,
verbose=T)
sel<-c("LibFMR12_1_1_10_g_400_V",
"LibFMR12_b_1_1_10_g_400_V",
"promotion_flag","random_bool",
"prop_starrating","prop_hist_log_price",
"price_usd","prop_location_score2",
"orig_destination_distance","prop_review_score",
"srch_length_of_stay","srch_booking_window","srch_adults_count",
"srch_children_count","srch_room_count",
"srch_saturday_night_bool","srch_query_affinity_score",
"comp_nb","comp_bo_nb",
"comp_lc_nb","Clean_price_dev",
"srch_id_nb","site_id_nb",
"visitor_location_country_id_nb","prop_country_id_nb",
"prop_id_nb","srch_destination_id_nb",
"VisProp_price_Dev",
"Diff50_starrating","Diff50_review_score",
"Diff50_location_score1","Diff50_loc","Diff50_price_usd",
"Diff_promotion_flag",
"Gap_PR","Gap_LOC","Gap_STAR","Gap_PROM",
"PR_pred","LOC_pred","STAR_pred","PROM_pred",
"prev_pos","prop_loc_NAs","prop_hist_log_price_NAs",
"date_stay","Diff_country")
library(gbm)
fmla <- as.formula(paste("y_s~ ",paste(sel,collapse= "+")))
set.seed(5486)
LambdaMart_52<-gbm(
fmla,
data=DATA_4T2,
distribution= list(name="pairwise",group="srch_id",metric="ndcg"),
n.trees=2000,
interaction.depth=8,
shrinkage=0.05,
bag.fraction=0.75,
verbose=T)
summary(LambdaMart_52)
Store(LambdaMart_52)
library(SOAR)
Objects()
load("~/Documents/Expedia/DATA_4T2.RData")
load("~/Documents/Expedia/DATA_4V.RData")
Store(DATA_4T2)
Store(DATA_4V)
load("~/Documents/Expedia/DATA_4H.RData")
load("~/Documents/Expedia/DATA_4H.RData")
library(SOAR)
Objects()
load("~/Documents/Expedia/DATA_4H.RData")
load("~/Documents/Expedia/DATA_4H.RData")
Store(DATA_4H)
library(SOAR)
Objects()
########################################################################
########### LAMBDA MART ##########
########################################################################
sel<-c("LibFMR12_1_1_10_g_400_V",
"LibFMR12_b_1_1_10_g_400_V",
"promotion_flag","random_bool",
"prop_starrating","prop_hist_log_price",
"price_usd","prop_location_score2",
"orig_destination_distance","prop_review_score",
"srch_length_of_stay","srch_booking_window","srch_adults_count",
"srch_children_count","srch_room_count",
"srch_saturday_night_bool","srch_query_affinity_score",
"comp_nb","comp_bo_nb",
"comp_lc_nb","Clean_price_dev",
"srch_id_nb","site_id_nb",
"visitor_location_country_id_nb","prop_country_id_nb",
"prop_id_nb","srch_destination_id_nb",
"VisProp_price_Dev",
"Diff50_starrating","Diff50_review_score",
"Diff50_location_score1","Diff50_loc","Diff50_price_usd",
"Diff_promotion_flag",
"Gap_PR","Gap_LOC","Gap_STAR","Gap_PROM",
"PR_pred","LOC_pred","STAR_pred","PROM_pred",
"prev_pos","prop_loc_NAs","prop_hist_log_price_NAs",
"date_stay","Diff_country")
########################################################################
# try with more data
########################################################################
library(gbm)
fmla <- as.formula(paste("y_s~ ",paste(sel,collapse= "+")))
set.seed(5486)
LambdaMart_52<-gbm(
fmla,
data=DATA_4T2,
distribution= list(name="pairwise",group="srch_id",metric="ndcg"),
n.trees=2000,
interaction.depth=8,
shrinkage=0.05,
bag.fraction=0.75,
verbose=T)
summary(LambdaMart_52)
Store(LambdaMart_52)
########################################################################
# submit
########################################################################
library(gbm)
LambdaMart_52_H<-predict(LambdaMart_52,DATA_4H,n.trees=2000)
Store(LambdaMart_52_H)
sol<-data.frame(data4sub,pred=LambdaMart_52_H)
sol<-sol[order(sol$srch_id,-sol$pred),]
names(sol)[1:2]<-c("SearchId","PropertyId")
write.csv(sol[,1:2],file="LambdaMart_52.csv",row.names=F)
########################################################################
# valid
########################################################################
LambdaMart_52_V<-predict(LambdaMart_52,DATA_4V,n.trees=2000)
Store(LambdaMart_52_V)
perf.pairwise(DATA_4V$y_s,LambdaMart_52_V,DATA_4V$srch_id,metric = "ndcg", w = NULL, max.rank = 38)
#
save(LambdaMart_52_V,file="LambdaMart_52_V.RData")
save(LambdaMart_52_H,file="LambdaMart_52_H.RData")
LambdaMart_52_V1800<-predict(LambdaMart_52,DATA_4V,n.trees=1800)
?gbm.more
perf.pairwise(DATA_4V$y_s,LambdaMart_52_V1800,DATA_4V$srch_id,metric = "ndcg", w = NULL, max.rank = 38)
LambdaMart_52_2500<-gbm.more(LambdaMart_52,n.new.trees=500)
Store(LambdaMart_52_2500)
LambdaMart_52_2500_V<-predict(LambdaMart_52_2500,DATA_4V,n.trees=1800)
Store(LambdaMart_52_2500_V)
perf.pairwise(DATA_4V$y_s,LambdaMart_52_2500_V,DATA_4V$srch_id,metric = "ndcg", w = NULL, max.rank = 38)
LambdaMart_52_2500_V<-predict(LambdaMart_52_2500,DATA_4V,n.trees=2500)
Store(LambdaMart_52_2500_V)
perf.pairwise(DATA_4V$y_s,LambdaMart_52_2500_V,DATA_4V$srch_id,metric = "ndcg", w = NULL, max.rank = 38)
LambdaMart_52_2500_H<-predict(LambdaMart_52_2500,DATA_4H,n.trees=2500)
Store(LambdaMart_52_2500_H)
save(LambdaMart_52_2500_H,file="LambdaMart_52_2500_H.RData")
Ridit<-runif(1000)
var(Ridit)
set.seed(233)
Ridit<-runif(1000)
set.seed(233)
Ridit<-runif(1000)*2-1
mean(Ridit)
var(Ridit)
Ridit<-runif(10000)*2-1
set.seed(233)
Ridit<-runif(10000)*2-1
var(Ridit)
mean(Ridit)
set.seed(233)
Ridit<-runif(100000)*2-1
var(Ridit)
mean(Ridit)
Ridit2<-((Ridit-1)/2)^2
var(Ridit2)
mean(Ridit2)
ST_Ridit<-Ridit/(sd(Ridit))
var(ST_Ridit)
1/(sd(Ridit))
var(Ridit2)
1/sd(Ridit2)
ST_Ridit2<-Ridit2/sd(Ridit2)
var(ST_Ridit2)
ST2_Ridit2<-Ridit2*sd(Ridit)/sd(Ridit2)
var(ST2_Ridit2)
var(Ridit)
sd(Ridit)/sd(Ridit2)
set.seed(233)
Ridit<-runif(1000000)*2-1
ST_Ridit<-Ridit/sd(Ridit)
set.seed(233)
Ridit<-runif(1000000)*2-1
Ridit2<-((Ridit-1)/2)^2
ST2_Ridit2<-Ridit2*sd(Ridit)/sd(Ridit2)
var(ST2_Ridit2)
var(Ridit)
sd(Ridit)/sd(Ridit2)
Ridit2<-((Ridit-1)/2)^3
Ridit2<-((Ridit-1)/2)^2
Ridit3<-((Ridit-1)/2)^3
ST2_Ridit3<-Ridit3*sd(Ridit)/sd(Ridit3)
var(ST2_Ridit3)
sd(Ridit)/sd(Ridit2)
sd(Ridit)/sd(Ridit3)
1/12
5-/36
5/36
5/3
set.seed(233)
Ridit<-runif(1000000)*2-1
Ridit2<-((Ridit-1)/2)^2
Ridit3<-((Ridit-1)/2)^3
sd(Ridit)/sd(Ridit2)
sd(Ridit)/sd(Ridit3)
set.seed(233)
Ridit<-runif(10000)*2-1
Ridit2<-((Ridit-1)/2)^2
Ridit3<-((Ridit-1)/2)^3
sd(Ridit)/sd(Ridit2)
sd(Ridit)/sd(Ridit3)
set.seed(233)
Ridit<-runif(10000)
Ridit2<-(Ridit)^2
Ridit3<-(Ridit)^3
sd(Ridit)/sd(Ridit2)
sd(Ridit)/sd(Ridit3)
sd(Ridit)
var(Ridit)
set.seed(233)
Ridit<-runif(10000)
var(Ridit)
set.seed(233)
Ridit<-runif(10000)*2-1
var(Ridit)
sd(Ridit)
Ridit<-runif(10000)*2-1
sd(Ridit)
Ridit<-runif(10000)
sd(Ridit)
set.seed(233)
Ridit<-runif(10000)
var(Ridit)
1/var(Ridit)
5/3
(5/3)^0.5
set.seed(233)
Ridit<-runif(10000)
var(Ridit)
sd(Ridit)
Ridit2<-(Ridit)^2
Ridit3<-(Ridit)^3
sd(Ridit)/sd(Ridit2)
(sd(Ridit)/sd(Ridit2))^2
1/(sd(Ridit)/sd(Ridit2))^2
12*1/(sd(Ridit)/sd(Ridit2))^2
7/6
(7/6)*0.5
(6/7)*0.5
(6/7)**0.5
sd(Ridit)/sd(Ridit2)
sd(Ridit)/sd(Ridit3)
set.seed(233)
Ridit<-runif(10000)
Ridit2<-(Ridit)^2
Ridit3<-(Ridit)^3
sd(Ridit)/sd(Ridit2)
sd(Ridit)/sd(Ridit3)
12*1/(sd(Ridit)/sd(Ridit2))^2
(sd(Ridit)/sd(Ridit2))^2
var(Ridit2)
var(Ridit)
summary(Ridit2)
set.seed(233)
Ridit<-runif(1000000)
Ridit2<-(Ridit)^2
var(Ridit2)
summary(Ridit2)
mean(Ridit2)
mean(Ridit2^2)
summary(Ridit)
45/48
library(SOAR)
Objects()
str(K5)
library(SOAR)
Objects()
auc(CHURNED12[K5[[1]]],mix1.all.optmin[SET90!="test",][K5[[1]],4])
source("_METRICS.R")
source("METRICS.R")
auc(CHURNED12[K5[[1]]],mix1.all.optmin[SET90!="test",][K5[[1]],4])
load("~/Documents/Churn/mix1.all.optmin.RData")
auc(CHURNED12[K5[[1]]],mix1.all.optmin[SET90!="test",][K5[[1]],4])
library(SOAR)
Objects()
library(SOAR)
Objects()
wd_path<-"~/Documents/CTB_SOL2"
library(SOAR) # to store data that will be used by all models
Objects()
item=item_list[1]
load(paste("Working_files/",Version,"_",item,"_Mod2Blend.RData",sep=""))
CV_pearson<-data.frame(Model=c(names(Mod2Blend)[2:ncol(Mod2Blend)],"Blend"))
for (item in item_list) {
print(item)
load(paste("Working_files/",Version,"_",item,"_Mod2Blend.RData",sep=""))
for (Model in CV_pearson$Model) {
if (Model=="Blend") {
load(paste("Working_files/",Version,"_",item,"_NNLS.RData",sep=""))
CV_pearson[CV_pearson$Model=="Blend",paste("I",item,sep="")]<-cor(Mod2Blend$y,NNLS$yhatV,method="pearson")
} else CV_pearson[CV_pearson$Model==Model,paste("I",item,sep="")]<-cor(Mod2Blend$y,Mod2Blend[,Model],method="pearson")
}
}
CV_pearson$All<-rowSums(CV_pearson[,-1])
.csv
DATA<-read.csv("~/Documents/Datasets/kickcars_train_small.csv")
str(DATA)
DATA<-read.csv("~/Documents/Datasets/bank_marketing_full.csv")
str(DATA)
library(earth)
Response="y"
DATA<-data.frame(Response=DATA[,Response],DATA[,-which(names(DATA)==Response)])
family=binomial
family="binomial"
DATA<-data.frame(Response=DATA[,Response],DATA[,-which(names(DATA)==Response)])
Response="y"
DATA<-data.frame(Response=DATA[,Response],DATA[,-which(names(DATA)==Response)])
DATA<-read.csv("~/Documents/Datasets/bank_marketing_full.csv")
DATA<-data.frame(Response=DATA[,Response],DATA[,-which(names(DATA)==Response)])
family="binomial"
if (family=="binomial")
DATA$Response<-as.numeric(factor(DATA$Response))-1
fmla <- as.formula(paste("Response~ ", paste(names(DATA_Ob)[-c(1)], collapse= "+")))
fmla <- as.formula(paste("Response~ ", paste(names(DATA)[-c(1)], collapse= "+")))
fit_mars<-earth(formula=fmla,data=DATA_Ob[set=="train",],degree=2,glm=list(family=family))
fit_mars<-earth(formula=fmla,data=DATA[set=="train",],degree=2,glm=list(family=family))
set.seed(846)
set<-sample(c("train","test"),nrow(DATA),replace=T,prob=c(0.66,0.34))
fit_mars<-earth(formula=fmla,data=DATA[set=="train",],degree=2,glm=list(family=family))
fit_mars
Ssummary(fit_mars)
summary(fit_mars)
predict_mars<-predict(fit_mars,DATA_Ob[set=="test",],type="response")
predict_mars<-predict(fit_mars,DATA[set=="test",],type="response")
(score_mars<-score_func(DATA$Response[set=="test"],predict_mars))
######################################################
# logLoss
######################################################
ll <- function(actual, predicted)
{
score <- -(actual*log(predicted) + (1-actual)*log(1-predicted))
score[actual==predicted] <- 0
score[is.nan(score)] <- Inf
score
}
logLoss <- function(actual, predicted) mean(ll(actual, predicted))
RMSE <- function(actual, predicted) mean((actual- predicted)^2)^0.5
score_func<-if (family=="binomial") logLoss else RMSE
(score_mars<-score_func(DATA$Response[set=="test"],predict_mars))
fit_mars<-earth(formula=fmla,data=DATA[set=="train",],degree=1,glm=list(family=family))
predict_mars<-predict(fit_mars,DATA[set=="test",],type="response")
(score_mars<-score_func(DATA$Response[set=="test"],predict_mars))
summary(fit_mars)
fit_mars<-earth(formula=fmla,data=DATA[set=="train",],degree=3,glm=list(family=family))
predict_mars<-predict(fit_mars,DATA[set=="test",],type="response")
(score_mars<-score_func(DATA$Response[set=="test"],predict_mars))
summary(fit_mars)
(score_mars<-score_func(DATA$Response[set=="test"],predict_mars))
newdata=DATA[set=="test",]
newdata=data.frame(DATA[set=="test",])
newdata=data.frame(DATA[set=="test",][1:10,])
str(newdata)
str(DATA)
for (i in 1:ncol(newdata))
newdata[,i]<-as.character(newdata[,i])
str(newdata)
newdata<-data.frame(newdata)
str(newdata)
read.csv
?read.csv
newdata<-read.csv("~/Documents/Datasets/bank_marketing_full.csv",nrows=10)
str(newdata)
predict(fit_mars,newdata,type="response")
newdata<-read.csv("~/Documents/Datasets/bank_marketing_full.csv",nrows=10)
predict(fit_mars,newdata,type="response")
newdata<-data.frame(Response=newdata[,Response],newdata[,-which(names(newdata)==Response)])
predict(fit_mars,newdata,type="response")
predict(fit_mars,DATA[1:10,],type="response")
table(newdata=DATA[1:10,])
newdata<-data.frame(Response=newdata[,Response],newdata[,-which(names(newdata)==Response)])
newdata<-read.csv("~/Documents/Datasets/bank_marketing_full.csv",nrows=10)
newdata<-data.frame(Response=newdata[,Response],newdata[,-which(names(newdata)==Response)])
table(newdata==DATA[1:10,])
head(newdata)
head(DATA)
library(Hmisc)
?spearman
?spearman2
load("~/Dropbox/WorldChurns_data/data.all.last.RData")
library(Hmisc)
str(data.all.last)
data.all.last$NUMBER_MONTH_OF_CHURN<-as.numeric(as.character(data.all.last$NUMBER_MONTH_OF_CHURN
))
cond<-!is.na(data.all.last$NUMBER_MONTH_OF_CHURN)
table(cond)
CHURNED12<-(data.all.last$NUMBER_MONTH_OF_CHURN[cond]<=12)+0
dim(data.all.last)
str(data.all.last)
plot(summary(CHURNED12~.,data=data.all.last[,c(3:8)]))
plot(summary(CHURNED12~.,data=data.all.last[cond,c(3:8)]))
str(cars)
wd_path<-"~/Documents/CTB_SOL_ESSAY"
setwd(wd_path)
Store(wd_path)
library(SOAR) # to store data that will be used by all models
Store(wd_path)
